//
// build.gradle
//
// Copyright (c) 2017, 2018, 2019 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import java.time.Instant


// ----------------------------------------------------------------
// Constants
// ----------------------------------------------------------------
ext {
    CBL_ORG = 'couchbase'
    CBL_GROUP = 'com.couchbase.lite'
    CBL_ARTIFACT_ID = 'couchbase-lite-android'
    CBL_DESCRIPTION = 'Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine.'
    CBL_LICENSE = 'Couchbase, Inc. Community Edition License Agreement'
    CBL_LICENSE_URL = "https://raw.githubusercontent.com/couchbase/product-texts/${getLicenseVersion()}/mobile/couchbase-lite/license/LICENSE_community.txt"
    CBL_PROJECT_URL = 'https://github.com:couchbase/couchbase-lite-android-ce.git'
    CBL_ISSUES_URL = 'https://github.com/couchbase/couchbase-lite-android-ce/issues'
    CBL_SITE_URL = 'https://developer.couchbase.com/mobile/'

    BUILD_TIME = Instant.now().toString()
    BUILD_RELEASE = file("$ROOT_DIR/version.txt").text.trim()
    BUILD_NUMBER = (project.hasProperty("buildNumber") && buildNumber) ? buildNumber : "SNAPSHOT"
    BUILD_VERSION = "${BUILD_RELEASE}-${BUILD_NUMBER}"
    BUILD_COMMIT = getBuildCommit()

    ETC_DIR = "${PROJECT_DIR}/etc"
    CBL_CORE_DIR = "${ROOT_DIR}/couchbase-lite-core"
    CBL_JAVA_DIR = "${ROOT_DIR}/couchbase-lite-java"
    CBL_JAVA_MODULE_DIR = "${CBL_JAVA_DIR}/lib"
    MODULE_DIR = "${PROJECT_DIR}/lib"
    REPORTS_DIR = "${buildDir}/reports"
}

// defining this property in the file ~/.gradle/gradle.properties
// can dramatically reduce your build time.
def TARGET_ABIS = (!hasProperty("targetAbis")) ? null : targetAbis.split(',')

// comma separated list of annotations for tests that should not be run.
def TEST_FILTER = (!project.hasProperty("testFilter")) ? null : testFilter

// Target repo for maven publish
def MAVEN_URL = (!project.hasProperty("mavenUrl")) ? null : mavenUrl

// local.properties
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// ----------------------------------------------------------------
// Build
// ----------------------------------------------------------------
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

group = CBL_GROUP
version = BUILD_VERSION

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    // ndkVersion '19.2.5345600'

    defaultConfig {
        minSdkVersion 19
        //noinspection OldTargetApi
        targetSdkVersion 27
        versionCode 1
        versionName BUILD_VERSION
        project.archivesBaseName = "${CBL_ARTIFACT_ID}-${versionName}"

        // if no specific ABIs specified, build all supported.
        if (TARGET_ABIS != null) {
            ndk { abiFilters TARGET_ABIS }
        }
        externalNativeBuild {
            cmake { targets 'LiteCoreJNI' }
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        if (TEST_FILTER != null) {
            testInstrumentationRunnerArguments notAnnotation: TEST_FILTER
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    buildTypes {
        debug {
            buildConfigField "String", "BUILD_TIME", "\"${BUILD_TIME}\""
            buildConfigField "String", "BUILD_COMMIT", "\"${BUILD_COMMIT}\""
            buildConfigField "boolean", "ENTERPRISE", "false"

            minifyEnabled false

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_STL=c++_static', "-DANDROID_TOOLCHAIN=clang", '-DANDROID_PLATFORM=android-19'
                    cppFlags "-std=c++11 -frtti -fexceptions -fPIC"
                }
            }

            // testCoverageEnabled is enabled in the `coverage` task
        }

        release {
            buildConfigField "String", "BUILD_TIME", "\"${BUILD_TIME}\""
            buildConfigField "String", "BUILD_COMMIT", "\"${BUILD_COMMIT}\""
            buildConfigField "boolean", "ENTERPRISE", "false"

            minifyEnabled false

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_STL=c++_static', "-DANDROID_TOOLCHAIN=clang", '-DANDROID_PLATFORM=android-19', '-DCMAKE_BUILD_TYPE=MinSizeRel'
                    cppFlags "-std=c++11 -frtti -fexceptions -fPIC"
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            version "3.10.2"
            path "${CBL_JAVA_MODULE_DIR}/CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            java.srcDirs = [
                "src/main/java",                                        // android specific codes
                "${CBL_JAVA_MODULE_DIR}/src/shared/main/java",          // shared java codes
                "${CBL_JAVA_MODULE_DIR}/src/shared/ce/java",            // shared java ce specific codes
            ]
        }
        androidTest {
            java.srcDirs = [
                "src/androidTest/java",                                 // android specific codes
                "${CBL_JAVA_MODULE_DIR}/src/shared/test/java"           // shared java tests
            ]
            assets.srcDirs = [
                "${CBL_CORE_DIR}/C/tests/data",                         // lite-core test assets
                "${CBL_JAVA_MODULE_DIR}/src/shared/test/assets"         // shared assets
            ]
        }
    }

    lintOptions {
        disable 'UseSparseArrays'
        abortOnError false
    }
}

repositories {
    google()
    jcenter()
}

dependencies {
    //noinspection GradleDependency
    compileOnly 'com.android.support:support-annotations:27.1.1'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:3.14.4'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$KOTLIN_VERSION"
    testImplementation 'junit:junit:4.12'

    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$KOTLIN_VERSION"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

/////// JavaDoc

// Say something once, why say it again?  Because gradle.
// This is the only way I could figure out, to get some of these things onto the javadoc classpath
// This is just and extreme hack.  My apologies.
configurations { javadocDeps }
dependencies {
    javadocDeps files("${buildDir}/generated/source/buildConfig/debug")
    javadocDeps files("${buildDir}/generated/source/buildConfig/release")
    //noinspection GradleDependency
    javadocDeps 'com.android.support:support-annotations:27.1.1'
    javadocDeps 'com.google.code.findbugs:annotations:3.0.1'
    //noinspection GradleDependency
    javadocDeps 'com.squareup.okhttp3:okhttp:3.9.1'
}

task javadoc(type: Javadoc) {
    afterEvaluate { dependsOn tasks.getByName("compileDebugJavaWithJavac") }

    failOnError false

    source android.sourceSets.main.java.srcDirs

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    classpath += configurations.javadocDeps

    options {
        title = "${CBL_LICENSE} ${project.version}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        links "https://docs.oracle.com/javase/8/docs/api/"
        linksOffline "https://developer.android.com/reference/", "${project.android.sdkDirectory}/docs/reference"
        addStringOption('Xdoclint:none', '-quiet')
    }
}


// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', '**/gen/**', "okhttp3/**"]

/////// Checkstyle
apply plugin: 'checkstyle'
task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    configFile file("${ETC_DIR}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${ETC_DIR}/checkstyle")]

    source android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude fileFilter

    classpath = files()
    showViolations true

    reports {
        xml {
            enabled = true
            setDestination(file("${REPORTS_DIR}/checkstyle.xml"))
        }
        html {
            enabled = true
            setDestination(file("${REPORTS_DIR}/checkstyle.html"))
        }
    }
}

/////// PMD
apply plugin: 'pmd'
pmd { toolVersion "5.8.1" }
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${ETC_DIR}/pmd/pmd.xml")

    source = android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude fileFilter

    reports {
        xml {
            enabled = true
            setDestination(file("${REPORTS_DIR}/pmd.xml"))
        }
        html {
            enabled = true
            setDestination(file("${REPORTS_DIR}/pmd.html"))
        }
    }
}

/////// Findbugs
// !!! FIXME: Update to SpotBugs
apply plugin: 'findbugs'
def findbugsAll = task('findbugs') {
    description 'Findbugs with all reports'
    group 'verification'
}

project.afterEvaluate {
    ['Html', 'Xml'].each { reportType ->
        findbugsAll.dependsOn task("findbugs${reportType}", type: FindBugs) {
            description "Findbugs with $reportType report"
            group 'verification'

            afterEvaluate { dependsOn tasks.find { t -> t.name.endsWith 'compileDebugSources' } }

            findbugs.toolVersion = "3.0.1"

            effort = "max"
            reportLevel = "medium"
            ignoreFailures = false

            source = android.sourceSets.main.java.srcDirs.collect {
                dir -> fileTree(dir: dir, include: '**/*.java').getFiles()
            }.flatten()


            classes = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
            classpath = files()

            excludeFilter = file("${ETC_DIR}/findbugs/findbugs.xml")

            reports {
                xml {
                    enabled = (reportType == "Xml")
                    setDestination(file("${REPORTS_DIR}/findbugs.xml"))
                }
                html {
                    enabled = (reportType == "Html")
                    setDestination(file("${REPORTS_DIR}/findbugs.html"))
                }
            }
        }
    }
}


// ----------------------------------------------------------------
// Testing
// ----------------------------------------------------------------

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco { toolVersion = JACOCO_VERSION }


// ----------------------------------------------------------------
// Publication
// ----------------------------------------------------------------

/////// Maven Publishing
// https://docs.gradle.org/current/userguide/publishing_maven.html
apply plugin: 'maven-publish'

def mavenRepoUser = properties.getProperty('maven.repo.user')
def mavenRepoPass = properties.getProperty('maven.repo.pass')

def pomConfig = {
    name "${CBL_GROUP}:${CBL_ARTIFACT_ID}"
    description CBL_DESCRIPTION
    url CBL_SITE_URL
    licenses {
        license {
            name CBL_LICENSE
            url CBL_LICENSE_URL
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Couchbase Mobile"
            email "mobile@couchbase.com"
            organization 'Couchbase'
            organizationUrl 'http://www.couchbase.com'
        }
    }
    issueManagement {
        system 'github'
        url CBL_ISSUES_URL
    }
    scm {
        url CBL_SITE_URL
        connection CBL_PROJECT_URL
        developerConnection CBL_PROJECT_URL
    }
}

// Generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = "${CBL_ARTIFACT_ID}"
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generate source.jar
task sourcesJar(type: Jar) {
    baseName = "${CBL_ARTIFACT_ID}"
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    repositories {
        maven {
            url MAVEN_URL
            credentials {
                username mavenRepoUser
                password mavenRepoPass
            }
        }
    }
}

project.afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId group
                artifactId CBL_ARTIFACT_ID
                version BUILD_VERSION

                artifact bundleReleaseAar
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def root = asNode()
                    // Workaround for description:
                    root.appendNode('description', CBL_DESCRIPTION)
                    root.children().last() + pomConfig

                    // maven-publish workaround to include dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}


// ----------------------------------------------------------------
// Tasks
// ----------------------------------------------------------------

// handy plugin for discovering task dependencies
// plugins { "com.dorongold.task-tree" version "1.3.1" }

///////// Dev tasks
task smokeTest(dependsOn: ['checkstyle', 'lint', 'pmd', 'findbugsHtml', 'compileDebugSources'])
task unitTest(dependsOn: ['smokeTest', 'testDebugUnitTest'])
task fullTest(dependsOn: ['unitTest', 'connectedDebugAndroidTest'])

task coverage(dependsOn: ['createDebugCoverageReport', 'coveralls']) {
    android.buildTypes.findByName('debug').testCoverageEnabled = true
}

///////// CI tasks
task ciCheck(dependsOn: ['checkstyle', 'lint', 'pmd', 'findbugsXml', 'test'])
task ciPublish(dependsOn: ['generatePomFileForMavenJavaPublication', 'publishMavenJavaPublicationToMavenRepository'])

// ordering (roughly last to first)
project.afterEvaluate {
    connectedDebugAndroidTest.shouldRunAfter unitTest
    testDebugUnitTest.shouldRunAfter smokeTest
    tasks.withType(FindBugs) { shouldRunAfter tasks.withType(Pmd) }
    tasks.withType(Pmd) { shouldRunAfter lint }
    // we have to wait for checkstyle to get added by its plugin...
    // findbugs gets a weird CME... whatever.
    tasks.whenTaskAdded {
        if (it.name.startsWith("findbugs")) {
            test.shouldRunAfter(it)
        }
        if (it.name.startsWith("checkstyle")) {
            lint.shouldRunAfter(it)
        }
    }
}

// Clean
// delete .externalNativeBuild to force rerun of cmake.  This is necessary because 'clean'
// deletes the file 'zconf.h' which is in .../build/intermediates, causing subsequent builds to fail.
clean.doLast {
    delete "${MODULE_DIR}/.externalNativeBuild"
    delete "${MODULE_DIR}/.cxx"
}

def getLicenseVersion() {
    def version = "master"
    try { version = 'git rev-parse --short HEAD'.execute([], file("${ROOT_DIR}/product-texts")).text.trim() }
    catch (Exception ignore) {}
    return version
}

def getBuildCommit() {
    def commit = "unknown"
    try {
        commit = 'git rev-parse --short HEAD'.execute([], file(PROJECT_DIR)).text.trim()
        if ('git status -uno --porcelain'.execute([], file(PROJECT_DIR)).text.length() <= 0) { commit += "+" }
    }
    catch (Exception ignore) {}
    return commit
}


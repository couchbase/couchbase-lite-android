//
// build.gradle
//
// Copyright (c) 2017, 2018, 2019 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import java.time.Instant

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'com.github.kt3k.coveralls'

ext {
    buildHost = 'hostname'.execute().text.trim()
    buildTime = Instant.now().toString()
}

def homeDir = "${projectDir}/.."
def baseDir = "${homeDir}/.."
def etcDir = "${homeDir}/etc"
def cblJavaDir = "${baseDir}/couchbase-lite-java"
def cblCoreDir = "${baseDir}/couchbase-lite-core"
def reportsDir = "${buildDir}/reports"

def cblVersion = file("${baseDir}/version.txt").text.trim()

// -PbuildNumber=123
def buildNum = (!hasProperty("buildNumber")) ? "0" : buildNumber

def buildCommit = 'git rev-parse --short HEAD'.execute([], file(homeDir)).text.trim() +
    (('git status -uno --porcelain'.execute([], file(homeDir)).text.length() <= 0) ? "" : "+")

// defining this property in the file ~/.gradle/gradle.properties
// can dramatically reduce your build time.
def buildAbis = (!hasProperty("targetAbis")) ? null : targetAbis.split(',')

// comma separated list of annotations for tests that should not be run.
def testFilter = (!hasProperty("filteredTests")) ? null : filteredTests

/**
 * group and version
 */
group = 'com.couchbase.lite'
version = cblVersion

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.0'
    // ndkVersion '19.2.5345600'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName cblVersion
        project.archivesBaseName = "couchbase-lite-android-${versionName}"

        // if no specific ABIs specified, build all supported.
        if (buildAbis != null) {
            ndk { abiFilters buildAbis }
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static', "-DANDROID_TOOLCHAIN=clang", '-DANDROID_PLATFORM=android-19'
                cppFlags "-std=c++11 -frtti -fexceptions -fPIC"
                // explicitly build libs
                targets 'LiteCoreJNI'
            }
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        if (testFilter != null) { testInstrumentationRunnerArguments notAnnotation: testFilter }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled = true
            buildConfigField "String", "BUILD_HOST", "\"${buildHost}\""
            buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
            buildConfigField "String", "BUILD_COMMIT", "\"${buildCommit}\""
            buildConfigField "String", "BUILD_NUMBER", "\"${buildNum}\""
            buildConfigField "boolean", "ENTERPRISE", "false"
        }
        release {
            minifyEnabled false
            buildConfigField "String", "BUILD_HOST", "\"${buildHost}\""
            buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
            buildConfigField "String", "BUILD_COMMIT", "\"${buildCommit}\""
            buildConfigField "String", "BUILD_NUMBER", "\"${buildNum}\""
            buildConfigField "boolean", "ENTERPRISE", "false"
        }
    }

    externalNativeBuild {
        cmake {
            version "3.10.2"
            path "${cblJavaDir}/CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            java.srcDirs = [
                "src/main/java",                              // android specific codes
                "${cblJavaDir}/src/shared/main/java",         // shared java codes
                "${cblJavaDir}/src/shared/ce/java",           // shared java ce specific codes
            ]
        }
        androidTest {
            java.srcDirs = [
                "src/androidTest/java",                       // android specific codes
                "${cblJavaDir}/src/shared/test/java"          // shared java tests
            ]
            assets.srcDirs = [
                "${cblJavaDir}/src/shared/test/assets",       // shared assets
                "${cblCoreDir}/C/tests/data"                  // lite-core test assets
            ]
        }
    }

    lintOptions {
        disable 'UseSparseArrays'
        abortOnError false
    }
}

repositories {
    google()
    jcenter()
}

dependencies {
    compileOnly 'com.android.support:support-annotations:27.1.1'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    implementation 'com.squareup.okhttp3:okhttp:3.9.1'

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// ----------------------------------------------------------------
// local.properties
// ----------------------------------------------------------------
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// -- bintray
def bintrayUser = properties.getProperty('bintray.user')
def bintrayKey = properties.getProperty('bintray.key')

// -- maven repo
def mavenRepoUrl = properties.getProperty('maven.repo.url')
def mavenRepoUser = properties.getProperty('maven.repo.user')
def mavenRepoPass = properties.getProperty('maven.repo.pass')

// ----------------------------------------------------------------
// delete .externalNativeBuild to force rerun of cmake
//  This is necessary because 'clean' deletes the file 'zconf.h'
//  which is in .../build/intermediates, causing subsequent
//  builds to fail.
// ----------------------------------------------------------------
clean.doFirst { delete "${projectDir}/.externalNativeBuild" }

// ----------------------------------------------------------------
// javadoc.jar and source.jar
// ----------------------------------------------------------------

// Say something once, why say it again?  Because gradle.
// This is the only way I could figure out, to get some of these things onto the javadoc classpath
// This is just and extreme hack.  My apologies.
configurations { javadocDeps }
dependencies {
    javadocDeps files("${buildDir}/generated/source/buildConfig/debug")
    javadocDeps files("${buildDir}/generated/source/buildConfig/release")
    javadocDeps 'com.android.support:support-annotations:27.1.1'
    javadocDeps 'com.google.code.findbugs:annotations:3.0.1'
    javadocDeps 'com.squareup.okhttp3:okhttp:3.9.1'
}

// Generate javadoc
task javadoc(type: Javadoc) {
    afterEvaluate { dependsOn tasks.getByName("compileDebugJavaWithJavac") }

    failOnError false

    source android.sourceSets.main.java.srcDirs

    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    classpath += configurations.javadocDeps

    options {
        title = "Couchbase Lite Community Edition ${project.version}"
        memberLevel = JavadocMemberLevel.PUBLIC
        docEncoding = 'UTF-8'
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        locale = 'en_US'
        links "https://docs.oracle.com/javase/8/docs/api/"
        linksOffline "https://developer.android.com/reference/", "${project.android.sdkDirectory}/docs/reference"
        addStringOption('Xdoclint:none', '-quiet')
    }
}

// Generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = project.name
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generate source.jar
task sourcesJar(type: Jar) {
    baseName = project.name
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

// ----------------------------------------------------------------
// Deployment
// ----------------------------------------------------------------

artifacts {
    archives javadocJar
    archives sourcesJar
}

def siteUrl = 'http://developer.couchbase.com/mobile/'
def gitUrl = 'https://github.com:couchbase/couchbase-lite-android.git'

// JFrog Bintray - JCenter deployment
bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ['mavenJava']
    pkg {
        repo = 'couchbase'
        name = 'couchbase-lite-android'
        desc = 'Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine.'
        userOrg = 'couchbase'
        licenses = ['Couchbase, Inc. Community Edition License Agreement']
        labels = ['couchbase lite', 'android', 'sync', 'mobile']
        vcsUrl = gitUrl
        websiteUrl = siteUrl
        issueTrackerUrl = 'https://github.com/couchbase/couchbase-lite-android/issues'
        publicDownloadNumbers = false
        version { name = this.version }
    }
}

// -------------------------------------------------------------------------------------------------
// Maven Publishing
// https://docs.gradle.org/current/userguide/publishing_maven.html
// -------------------------------------------------------------------------------------------------

// Create the pom configuration:
def pomConfig = {
    name "com.couchbase.lite:couchbase-lite-android"
    description "Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine."
    url "http://developer.couchbase.com/mobile/"
    licenses {
        license {
            name "Couchbase, Inc. Community Edition License Agreement"
            url "https://www.couchbase.com/binaries/content/assets/website/legal/ce-license-agreement.pdf"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Couchbase Mobile"
            email "mobile@couchbase.com"
            organization 'Couchbase'
            organizationUrl 'http://www.couchbase.com'
        }
    }
    issueManagement {
        system 'github'
        url 'https://github.com/couchbase/couchbase-lite-android/issues'
    }
    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
}

project.afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId group
                artifactId 'couchbase-lite-android'
                version this.version

                artifact bundleReleaseAar
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def root = asNode()
                    // Workaround for description:
                    root.appendNode('description', 'Couchbase Lite is an embedded lightweight, document-oriented (NoSQL), syncable database engine.')
                    root.children().last() + pomConfig

                    // maven-publish workaround to include dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
publishing {
    repositories {
        maven {
            credentials {
                username mavenRepoUser
                password mavenRepoPass
            }
            url mavenRepoUrl
        }
    }
}

// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', '**/gen/**', "okhttp3/**"]

apply plugin: 'checkstyle'
task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    configFile file("${etcDir}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${etcDir}/checkstyle")]

    source android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude fileFilter

    classpath = files()
    showViolations true

    reports {
        xml {
            enabled = true
            setDestination(file("${reportsDir}/checkstyle.xml"))
        }
        html {
            enabled = true
            setDestination(file("${reportsDir}/reports/checkstyle.html"))
        }
    }
}

apply plugin: 'pmd'
pmd { toolVersion "5.8.1" }
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${etcDir}/pmd/pmd.xml")

    source = android.sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude fileFilter

    reports {
        xml {
            enabled = true
            setDestination(file("${reportsDir}/reports/pmd.xml"))
        }
        html {
            enabled = true
            setDestination(file("${reportsDir}/pmd.html"))
        }
    }
}

// !!! FIXME: Update to SpotBugs
apply plugin: 'findbugs'
def findbugsAll = task('findbugs') {
    description 'Findbugs with all reports'
    group 'verification'
}

project.afterEvaluate {
    ['Html', 'Xml'].each { reportType ->
        findbugsAll.dependsOn task("findbugs${reportType}", type: FindBugs) {
            description "Findbugs with $reportType report"
            group 'verification'

            afterEvaluate { dependsOn tasks.find { t -> t.name.endsWith 'compileDebugSources' } }

            findbugs.toolVersion = "3.0.1"

            effort = "max"
            reportLevel = "medium"
            ignoreFailures = false

            source = android.sourceSets.main.java.srcDirs.collect {
                dir -> fileTree(dir: dir, include: '**/*.java').getFiles()
            }.flatten()


            classes = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
            classpath = files()

            excludeFilter = file("${etcDir}/findbugs/findbugs.xml")

            reports {
                xml {
                    enabled = (reportType == "Xml")
                    setDestination(file("${reportsDir}/findbugs.xml"))
                }
                html {
                    enabled = (reportType == "Html")
                    setDestination(file("${reportsDir}/findbugs.html"))
                }
            }
        }
    }
}

// ----------------------------------------------------------------
// Coveralls
// ----------------------------------------------------------------

coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}

task smoketest(dependsOn: ['checkstyle', 'lint', 'findbugsHtml', 'pmd', 'testDebugUnitTest'])
task checkLocal(dependsOn: ['smoketest', 'connectedDebugAndroidTest'])

task buildCI(dependsOn: ['checkstyle', 'findbugsXml', 'pmd', 'check', 'assembleRelease'])
task testCI(dependsOn: ['buildCI', 'connectedAndroidTest'])


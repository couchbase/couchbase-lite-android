//
// build.gradle
//
// Copyright (c) 2017, 2018, 2019 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// The Module-level Build File
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

apply plugin: 'java-library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'com.github.kt3k.coveralls'

def baseDir = "${projectDir}/.."
def etcDir = "${projectDir}/etc"
def sharedDir = "${baseDir}/shared"
def reportsDir = "${buildDir}/reports"

// -PbuildNumber=123
def buildNo = "0"
if (hasProperty("buildNumber")) {
    buildNo = buildNumber
}

// git commit hash
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

group = 'com.couchbase.lite'

java {
    version = file("${baseDir}/version.txt").text.trim()

    targetCompatibility JavaVersion.VERSION_1_8
    sourceCompatibility JavaVersion.VERSION_1_8

    sourceSets.main.java.srcDirs += "${sharedDir}/src/main/java"
}

repositories {
    google()
    jcenter()
}

dependencies {
    compileOnly 'com.android.support:support-annotations:28.0.0'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    implementation 'com.squareup.okhttp3:okhttp:3.9.1'

    implementation 'org.json:json:20180813'

    testImplementation 'junit:junit:4.12'
}

// ----------------------------------------------------------------
// Static analysis
// ----------------------------------------------------------------

def fileFilter = ['**/*Test*.*', '**/gen/**', 'okhttp3**']

apply plugin: 'checkstyle'

checkstyle {
    toolVersion = "8.18"

    showViolations true

    configFile file("${etcDir}/checkstyle/checkstyle.xml")
    configProperties = ['configDir': file("${etcDir}/checkstyle")]
}

task checkstyle(type: Checkstyle) {
    description 'Checkstyle'
    group 'verification'

    classpath = fileTree("${buildDir}/classes/java")

    reports {
        xml {
            enabled = true
            setDestination(file("${reportsDir}/checkstyle.xml"))
        }
        html {
            enabled = true
            setDestination(file("${reportsDir}/reports/checkstyle.html"))
        }
    }
}

apply plugin: 'pmd'
// this code totally does not comply with 6.x guidelines
pmd { toolVersion "5.8.1" }
task pmd(type: Pmd) {
    description 'PMD'
    group 'verification'

    ruleSetFiles = files("${etcDir}/pmd/pmd.xml")

    source = sourceSets.main.java.srcDirs
    include '**/*.java'
    exclude fileFilter

    reports {
        xml {
            enabled = true
            setDestination(file("${reportsDir}/reports/pmd.xml"))
        }
        html {
            enabled = true
            setDestination(file("${reportsDir}/pmd.html"))
        }
    }
}

// !!FIXME: Update to SpotBugs
apply plugin: 'findbugs'
def findbugsAll = task('findbugs') {
    description 'Findbugs with all reports'
    group 'verification'
}

['Html', 'Xml'].each { reportType ->
    findbugsAll.dependsOn task("findbugs${reportType}", type: FindBugs) {
        description "Findbugs with $reportType report"
        group 'verification'

        dependsOn 'compileJava'

        findbugs.toolVersion = "3.0.1"

        effort = "max"
        reportLevel = "medium"
        ignoreFailures = false

        source = sourceSets.main.java.srcDirs.collect {
            dir -> fileTree(dir: dir, include: '**/*.java').getFiles()
        }.flatten()


        classes = fileTree(dir: "${buildDir}/classes/java/main", excludes: fileFilter)
        classpath = files()

        excludeFilter = file("${etcDir}/findbugs/findbugs.xml")

        reports {
            xml {
                enabled = (reportType == "Xml")
                setDestination(file("${reportsDir}/findbugs.xml"))
            }
            html {
                enabled = (reportType == "Html")
                setDestination(file("${reportsDir}/findbugs.html"))
            }
        }
    }
}

// ----------------------------------------------------------------
// Coveralls
// ----------------------------------------------------------------

coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}


task smoketest(dependsOn: ['checkstyleMain', 'findbugsHtml', 'pmdMain'])

task checkLocal(dependsOn: ['smoketest', 'test'])

task buildCI(dependsOn: ['checkstyleMain', 'findbugsXml', 'pmdMain', 'test'])

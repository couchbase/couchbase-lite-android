<?xml version="1.0" encoding="utf-8"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property name="charset"
        value="utf-8"/>

    <module name="SuppressionFilter">
        <property name="file"
            value="${configDir}/suppressions.xml"/>
    </module>

    <module name="SuppressWarningsFilter" />

    <!-- Checks that there are no tab characters in the source code. -->
    <module name="FileTabCharacter">
        <property name="eachLine"
            value="true"/>
    </module>

    <!-- Checks whether files end with a new line. -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Ensures lines do not exceed 120 characters. -->
    <module name="LineLength">
        <property name="max"
            value="120"/>
    </module>

    <!-- Checks for trailing spaces -->
    <module name="RegexpSingleline">
        <property name="format"
            value="\s+$"/>
        <property name="minimum"
            value="0"/>
        <property name="maximum"
            value="0"/>
        <property name="message"
            value="Line has trailing spaces."/>
    </module>

    <!-- Checks for unnecessary blank before closing brace -->
    <module name="RegexpMultiline">
        <property name="format"
            value="\n[ \t\r]*\n[ \t\r]*}"/>
        <property name="message"
            value="Unnecessary blank line."/>
    </module>

    <!-- Checks for unnecessary blank after opening brace -->
    <module name="RegexpMultiline">
        <property name="format"
            value="\) [throws [a-zA-Z]+ ]*\{\n[ \t\r]*\n"/>
        <property name="message"
            value="Unnecessary blank line."/>
    </module>

    <module name="RegexpSingleline">
        <property name="format"
            value="new Date\(\)\.getTime\(\)"/>
        <property name="message"
            value="Call System.currentTimeMillis() instead of new Date().getTime()"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format"
            value="^(&lt;&lt;&lt;&lt;&lt;&lt;&lt;|&gt;&gt;&gt;&gt;&gt;&gt;&gt;)"/>
        <property name="message"
            value="Looks like a bad merge."/>
    </module>

    <module name="SuppressWarningsFilter"/>
    <module name="TreeWalker">
        <module name="SuppressWarningsHolder" />

        <!-- Verifies that both Deprecated annotation is present and the @deprecated Javadoc tag is present when either is present -->
        <module name="MissingDeprecated"/>

        <!-- Prevent using System.out or System.err for logging. Log class is the right way to log things -->
        <module name="RegexpSinglelineJava">
            <property name="format"
                value="System\.(out|err)\."/>
            <property name="message"
                value="Do not use System.out nor System.err.  Use a logger."/>
        </module>

        <!-- Checks for empty if/else/for/while/do/try/finally/instant initializer/static initializer blocks -->
        <module name="EmptyBlock">
            <property name="option"
                value="text"/>
            <property name="tokens"
                value="LITERAL_IF, LITERAL_ELSE"/>
            <property name="tokens"
                value="LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY"/>
            <property name="tokens"
                value="INSTANCE_INIT, STATIC_INIT"/>
        </module>

        <!-- Disallow nested blocks except in case statements   -->
        <module name="AvoidNestedBlocks"/>

        <!-- Ensures that exceptions are immutable (i.e. only have final fields) -->
        <module name="MutableException"/>

        <!-- Checks that classes that define an equals method also override method Object.equals(java.lang.Object) -->
        <module name="CovariantEquals"/>

        <!-- Checks that classes that override equals() also override hashCode() -->
        <module name="EqualsHashCode"/>

        <!-- Checks that local variables that never have their values changed are declared final -->
        <module name="FinalLocalVariable">
            <property name="tokens"
                value="VARIABLE_DEF"/>
        </module>

        <!-- Checks that a switch statement has a default clause
        <module name="MissingSwitchDefault"/>
         -->

        <!-- Check that the default is after all the cases in a switch statement. -->
        <module name="DefaultComesLast"/>

        <!-- Checks for fall through in switch statement where a case contains code, but lacks break, return, throw or continue -->
        <module name="FallThrough"/>

        <!-- Checks for overly complicated boolean expressions -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Checks for overly complicated boolean return statements -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks that string literals are not used with == or != -->
        <module name="StringLiteralEquality"/>

        <!-- Checks that the clone() method is not overridden (because it is terrible) -->
        <module name="NoClone"/>

        <!-- Verifies that there are no finalize() methods defined in a class. -->
        <module name="NoFinalizer"/>

        <!-- Checks there is only one statement per line. -->
        <module name="OneStatementPerLine"/>

        <!-- Checks that there are no import statements that use the * notation -->
        <module name="AvoidStarImport"/>

        <!-- Checks that there are no static imports other than the following exceptions -->
        <module name="AvoidStaticImport"/>

        <!-- Checks for redundant (duplicate, java.lang, class in same package) import statements -->
        <module name="RedundantImport"/>

        <!-- Checks for redundant modifiers in interface definitions  -->
        <module name="RedundantModifier"/>

        <!-- Checks for unused import statements -->
        <module name="UnusedImports"/>

        <!-- Checks that long constants end with 'L' instead of 'l -->
        <module name="UpperEll"/>

        <!-- Enforces Java-style array type declaration (String[] args instead of String args[]) -->
        <module name="ArrayTypeStyle">
            <property name="javaStyle"
                value="true"/>
        </module>

        <!-- Checks that the order of modifiers conforms to the suggestions in JLS, as follows: -->
        <!-- public/protected/private, abstract/static, final/transient/volatile, synchronized, native, strictfp -->
        <module name="ModifierOrder"/>

        <!-- Checks that whitespaces around < and > are correct -->
        <module name="GenericWhitespace"/>

        <!-- Ensures fields declaration order

        Disabled because it does not allow the separation of statics
        <module name="DeclarationOrder" />
         -->

        <!-- Checks that a token is surrounded by whitespace -->
        <module name="WhitespaceAround">
            <property name="tokens"
                value="LITERAL_IF, LITERAL_ELSE"/>
            <property name="tokens"
                value="LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY"/>
            <property name="tokens"
                value="PLUS, MINUS, DIV, STAR, MOD, BAND, BOR, BXOR, LAND, LOR, BSR, SL, SR"/>
            <property name="tokens"
                value="PLUS_ASSIGN, MINUS_ASSIGN, DIV_ASSIGN, STAR_ASSIGN, MOD_ASSIGN"/>
            <property name="tokens"
                value="BAND_ASSIGN, BOR_ASSIGN, BXOR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, SR_ASSIGN"/>
            <property name="tokens"
                value="ASSIGN, QUESTION, EQUAL, NOT_EQUAL, LT, LE, GT, GE"/>
        </module>

        <!-- Checks that there are no empty spaces in an empty for loop initializer -->
        <module name="EmptyForInitializerPad">
            <property name="option"
                value="nospace"/>
        </module>

        <!-- Checks that there are no empty spaces for an empty for iterator -->
        <module name="EmptyForIteratorPad">
            <property name="option"
                value="nospace"/>
        </module>

        <!-- Checks that there are no spaces between left parenthesis and parameter list -->
        <module name="MethodParamPad">
            <property name="tokens"
                value="CTOR_DEF, SUPER_CTOR_CALL, METHOD_DEF, METHOD_CALL"/>
            <property name="option"
                value="nospace"/>
            <property name="allowLineBreaks"
                value="true"/>
        </module>

        <!-- Checks that there is no whitespace after unary minus/plus, !, ., ~, pre-increment and pre-decrement -->
        <module name="NoWhitespaceAfter">
            <property name="tokens"
                value="UNARY_MINUS, UNARY_PLUS, LNOT, DOT, BNOT, INC, DEC"/>
            <property name="allowLineBreaks"
                value="false"/>
        </module>

        <!-- Checks that there is no whitespace before ;, ., post-increment and post-decrement -->
        <module name="NoWhitespaceBefore">
            <property name="tokens"
                value="SEMI, DOT, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks"
                value="true"/>
        </module>

        <!-- Ensures no spaces after left or before right parenthesis -->
        <module name="ParenPad">
            <property name="tokens"
                value="CTOR_CALL, SUPER_CTOR_CALL, METHOD_CALL"/>
            <property name="option"
                value="nospace"/>
        </module>

        <!-- Ensures no spaces after left or before right parenthesis in casts -->
        <module name="TypecastParenPad">
            <property name="option"
                value="nospace"/>
        </module>

        <!-- Checks that a comma, semicolon and casts are followed by whitespace -->
        <module name="WhitespaceAfter">
            <property name="tokens"
                value="COMMA, SEMI, TYPECAST"/>
        </module>

        <!-- Validates identifier names -->
        <module name="PackageName">
            <property name="format"
                value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <module name="TypeName">
            <property name="format"
                value="^[A-Z][a-zA-Z0-9]*$"/>
        </module>
        <module name="MethodName">
            <property name="format"
                value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="ParameterName">
            <property name="format"
                value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="LocalVariableName">
            <property name="format"
                value="^[a-z][A-Z]{0,2}([a-z0-9]+[A-Z]{0,2})*$"/>
        </module>
        <module name="LocalFinalVariableName">
            <property name="format"
                value="^[a-z][A-Z]{0,2}([a-z0-9]+[A-Z]{0,2})*$"/>
        </module>
        <module name="MemberName">
            <property name="format"
                value="^[a-z][A-Z]{0,2}([a-z0-9]+[A-Z]{0,2})*$"/>
            <property name="applyToPublic"
                value="true"/>
        </module>
        <module name="ImportOrder">
            <property name="groups"
                value="android,androidx,/^java/,/javax/,/^(?!com.couchbase)/,/com.couchbase/"/>
            <property name="ordered"
                value="true"/>
            <property name="separated"
                value="true"/>
            <property name="caseSensitive"
                value="true"/>
            <property name="option"
                value="bottom"/>
            <message key="import.ordering"
                value="Wrong order for ''{0}'' import. Order should be: android, java, javax, dagger, com, net, org. Each group should be separated by a single blank line."/>
        </module>

        <module name="NeedBraces">
            <property name="tokens"
                value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"/>
        </module>

        <module name="StaticVariableName">
            <property name="format"
                value="^[a-z][A-Z]{0,2}([a-z0-9]+[A-Z]{0,2})*$"/>
        </module>

        <!-- Public static final fields (constants) are ALL_CAPS_WITH_UNDERSCORES. -->
        <module name="ConstantName">
            <property name="format"
                value="^[A-Z][_A-Z0-9]*$"/>
            <property name="applyToProtected"
                value="false"/>
            <property name="applyToPackage"
                value="false"/>
            <property name="applyToPrivate"
                value="false"/>
            <message key="name.invalidPattern"
                value="Public static final fields (constants) are ALL_CAPS_WITH_UNDERSCORES."/>
        </module>

        <!--
        <module name="RegexpSinglelineJava">
            <property name="format" value="^\s*//(?!noinspection)\S"/>
            <property name="message" value="// is not followed by whitespace."/>
        </module>
        -->

        <module name="RegexpSinglelineJava">
            <property name="format"
                value="\[\]\{"/>
            <property name="message"
                value="[] should be followed by whitespace."/>
        </module>
    </module>
</module>

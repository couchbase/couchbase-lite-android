//
// DatabaseAPITest.java
//
// Copyright (c) 2017 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
package com.couchbase.lite.api;

import android.util.Log;

import com.couchbase.lite.BaseTest;
import com.couchbase.lite.BasicAuthenticator;
import com.couchbase.lite.Blob;
import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.DataSource;
import com.couchbase.lite.Database;
import com.couchbase.lite.DatabaseConfiguration;
import com.couchbase.lite.Dictionary;
import com.couchbase.lite.Document;
import com.couchbase.lite.Endpoint;
import com.couchbase.lite.Expression;
import com.couchbase.lite.LogDomain;
import com.couchbase.lite.LogLevel;
import com.couchbase.lite.MutableDocument;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryBuilder;
import com.couchbase.lite.Replicator;
import com.couchbase.lite.ReplicatorChange;
import com.couchbase.lite.ReplicatorChangeListener;
import com.couchbase.lite.ReplicatorConfiguration;
import com.couchbase.lite.ResultSet;
import com.couchbase.lite.SelectResult;
import com.couchbase.lite.URLEndpoint;
import com.couchbase.lite.utils.ZipUtils;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Locale;

public class DatabaseAPITest extends BaseTest {
    static final String TAG = DatabaseAPITest.class.getSimpleName();

    @Before
    public void setUp() throws Exception {
        super.setUp();
    }

    @After
    public void tearDown() throws Exception {
        super.tearDown();
    }

    //@Test
    public void testGettingStarted() throws CouchbaseLiteException, URISyntaxException {
        // # tag::getting-started[]

        // Get the database (and create it if it doesnâ€™t exist).
        DatabaseConfiguration config = new DatabaseConfiguration(/* Android Context*/ context);
        Database database = new Database("mydb", config);

        // Create a new document (i.e. a record) in the database.
        MutableDocument mutableDoc = new MutableDocument()
                .setFloat("version", 2.0F)
                .setString("type", "SDK");

        // Save it to the database.
        database.save(mutableDoc);

        // Update a document.
        mutableDoc = database.getDocument(mutableDoc.getId()).toMutable();
        mutableDoc.setString("language", "Java");
        database.save(mutableDoc);
        Document document = database.getDocument(mutableDoc.getId());
        // Log the document ID (generated by the database) and properties
        Log.i(TAG, "Document ID :: " + document.getId());
        Log.i(TAG, "Learning " + document.getString("language"));

        // Create a query to fetch documents of type SDK.
        Query query = QueryBuilder.select(SelectResult.all())
                .from(DataSource.database(database))
                .where(Expression.property("type").equalTo(Expression.string("SDK")));
        ResultSet result = query.execute();
        Log.i(TAG, "Number of rows ::  " + result.allResults().size());

        // Create replicators to push and pull changes to and from the cloud.
        Endpoint targetEndpoint = new URLEndpoint(new URI("ws://localhost:4984/example_sg_db"));
        ReplicatorConfiguration replConfig = new ReplicatorConfiguration(database, targetEndpoint);
        replConfig.setReplicatorType(ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL);

        // Add authentication.
        replConfig.setAuthenticator(new BasicAuthenticator("john", "pass"));

        // Create replicator.
        Replicator replicator = new Replicator(replConfig);

        // Listen to replicator change events.
        replicator.addChangeListener(new ReplicatorChangeListener() {
            @Override
            public void changed(ReplicatorChange change) {
                if (change.getStatus().getError() != null)
                    Log.i(TAG, "Error code ::  " + change.getStatus().getError().getCode());
            }
        });

        // Start replication.
        replicator.start();

        // # end::getting-started[]

        database.delete();
    }

    @Test
    public void test1xAttachments() throws CouchbaseLiteException, IOException {
        // if db exist, delete it
        deleteDB("android-sqlite", context.getFilesDir());

        ZipUtils.unzip(getAsset("replacedb/android140-sqlite.cblite2.zip"), context.getFilesDir());

        Database db = new Database("android-sqlite", new DatabaseConfiguration(context));
        try {

            Document doc = db.getDocument("doc1");

            // For Validation
            Dictionary attachments = doc.getDictionary("_attachments");
            Blob blob = attachments.getBlob("attach1");
            byte[] content = blob.getContent();
            // For Validation

            byte[] attach = String.format(Locale.ENGLISH, "attach1").getBytes();
            Arrays.equals(attach, content);

        } finally {
            // close db
            db.close();
            // if db exist, delete it
            deleteDB("android-sqlite", context.getFilesDir());
        }

        Document document = new MutableDocument();

        // # tag::1x-attachment[]
        Dictionary attachments = document.getDictionary("_attachments");
        Blob blob = attachments != null ? attachments.getBlob("avatar") : null;
        byte[] content = blob != null ? blob.getContent() : null;
        // # end::1x-attachment[]
    }

    // ### New Database
    @Test
    public void testNewDatabase() throws CouchbaseLiteException {
        // # tag::new-database[]
        DatabaseConfiguration config = new DatabaseConfiguration(/* Android Context*/ context);
        Database database = new Database("my-database", config);
        // # end::new-database[]

        database.delete();
    }

    // ### Logging
    @Test
    public void testLogging() throws CouchbaseLiteException {
        // # tag::logging[]
        Database.setLogLevel(LogDomain.REPLICATOR, LogLevel.VERBOSE);
        Database.setLogLevel(LogDomain.QUERY, LogLevel.VERBOSE);
        // # end::logging[]
    }

    @Test
    public void testSingletonPattern() throws CouchbaseLiteException {
        // --- code example ---
        DataManager mgr = DataManager.instance(new DatabaseConfiguration(/* Android Context*/ context));
        // --- code example ---

        mgr.delete();
    }

    // ### Loading a pre-built database
    @Test
    public void testPreBuiltDatabase() throws IOException {
        // # tag::prebuilt-database[]
        DatabaseConfiguration config = new DatabaseConfiguration(/* Android Context*/ context);
        ZipUtils.unzip(getAsset("replacedb/android200-sqlite.cblite2.zip"), context.getFilesDir());
        File path = new File(context.getFilesDir(), "android-sqlite");
        try {
            Database.copy(path, "travel-sample", config);
        } catch (CouchbaseLiteException e) {
            Log.e(TAG, "Could not load pre-built database");
        }
        // # end::prebuilt-database[]
    }


    // helper methods

    // if db exist, delete it
    private void deleteDB(String name, File dir) throws CouchbaseLiteException {
        // database exist, delete it
        if (Database.exists(name, context.getFilesDir())) {
            // sometimes, db is still in used, wait for a while. Maximum 3 sec
            for (int i = 0; i < 10; i++) {
                try {
                    Database.delete(name, dir);
                    break;
                } catch (CouchbaseLiteException ex) {
                    if (ex.getCode() == CBLErrorBusy) {
                        try {
                            Thread.sleep(300);
                        } catch (Exception e) {
                        }
                    } else {
                        throw ex;
                    }
                }
            }
        }
    }
}
